%{

open Ast

%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token <System.Int32> INT32
%token <System.Double> FLOAT
%token <string> TEXT
%token <string> LEXEREXCEPTION
%token <string> PARSEREXCEPTION
%token GT GE EQ LT LE NE //operators
%token PLUS MINUS
%token POW ASTER SLASH SQRT LOG MOD MAX MIN SMA ABS STD SLOPE CANDLE PAT1 PAT2 PAT3 EQUALS//functions
%token OPEN HIGH LOW CLOSE VOLUME SYMBOL DATE //data
%token FOR INCR VAR
%token IF AMP PIPE AND OR COUNT//bool comparison
%token LPAREN RPAREN
%token COMMA APOS //needs to be after ()
%token EOF

%left LPAREN //lowest precedence
%left AND OR
%left EQ GT GE LT LE NE
%left PLUS MINUS
%left ASTER SLASH POW PCT//highest precedence

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Ast.Equation > start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  In this case the actions 
// produce data using F# data construction terms.
start: Prog { Equation($1) }

Prog:
    | Expr EOF					{ $1 }

CommaList:   
	| TEXT				    {[$1]}
    | CommaList COMMA TEXT  { $3 :: $1 }  

Expr:
	| Expr PLUS  Term			{ Plus($1, $3)  }
    | Expr MINUS Term			{ Minus($1, $3) }
	| Expr POW Term				{ Pow($1, $3)   }
	| Expr ASTER Term			{ Times($1, $3) }
	| Expr SLASH Term			{ Divide($1, $3) }
	| Expr MOD Term				{ Modulus($1, $3)}
	| Expr EQ Expr				{ Eq($1, $3)    }
	| Expr GT Expr				{ Gt($1, $3)    }
	| Expr GE Expr				{ Ge($1, $3)    }
	| Expr LT Expr				{ Lt($1, $3)    }
	| Expr LE Expr				{ Le($1, $3)    }
	| Expr NE Expr				{ Ne($1, $3)    }
	| Expr AMP Expr				{ Amp($1, $3)   }
	| Expr PIPE Expr			{ Pipe($1, $3)    }
	| Term						{ Term($1)      }

Term:
	| SQRT Factor												{ Sqrt($2)       }
	| LOG Factor												{ Log($2)        }
	| OPEN Factor												{ O($2)          }
	| HIGH Factor												{ H($2)          }
	| LOW Factor												{ L($2)          }
	| CLOSE Factor												{ C($2)          }
	| VOLUME Factor												{ V($2)          }
	| SYMBOL Factor												{ S($2)          }
	| DATE Factor												{ D($2)          }
	| MIN LPAREN Expr COMMA Expr RPAREN							{ Min($3, $5)    }
	| MAX LPAREN Expr COMMA Expr RPAREN							{ Max($3, $5)    }
	| SMA LPAREN Expr COMMA TEXT COMMA Expr  RPAREN				{ Sma($3, $5, $7)    }
	| STD LPAREN TEXT COMMA Expr  RPAREN						{ Std($3, $5)    }
	| SLOPE LPAREN TEXT COMMA Expr COMMA Expr  RPAREN			{ Slope($3, $5,$7)    }
	| CANDLE LPAREN TEXT COMMA Expr  RPAREN						{ Candle($3, $5)    }
	| PAT1 LPAREN TEXT COMMA Expr  RPAREN						{ Pat1($3, $5)    }
	| PAT2 LPAREN TEXT COMMA Expr COMMA Expr  RPAREN			{ Pat2($3, $5, $7)    }
	| PAT3 LPAREN TEXT COMMA Expr COMMA Expr COMMA Expr RPAREN  { Pat3($3, $5, $7, $9)    }
	| IF LPAREN Expr COMMA Expr COMMA Expr RPAREN				{ If($3, $5, $7)    }
	| AND LPAREN Factor COMMA Expr RPAREN						{ And($3, $5)    }
	| OR LPAREN Factor COMMA Expr RPAREN						{ Or($3, $5)    }
	| FOR LPAREN Factor COMMA Expr RPAREN						{ For($3, $5)    }
	| COUNT LPAREN TEXT COMMA Factor COMMA Expr RPAREN			{ Count($3, $5, $7)    }
	| ABS LPAREN Expr RPAREN									{ Abs($3)        }
	| INCR TEXT													{ Incr($2)    }
	| VAR LPAREN TEXT RPAREN									{ Var($3)    }
	| EQUALS LPAREN TEXT COMMA TEXT RPAREN						{ Equals($3,$5)    }
	| Factor													{ Factor($1)     }
    
Factor:
    | FLOAT						{ Float($1)      }
    | INT32						{ Integer($1)    }
	| LPAREN Expr RPAREN		{ ParenEx($2)    }